#--- source.hlsl

StructuredBuffer<float4> X : register(t0);
StructuredBuffer<float4> Y : register(t1);

RWStructuredBuffer<float> Result : register(u2);

[numthreads(1,1,1)]
void main() {
  // test special cases
  // distance(inf, 1.0) = inf
  Result[0] = distance(X[0].x, Y[0].x);

  // distance(NaN, 1.0) = NaN
  Result[1] = distance(X[0].y, Y[0].x);

  // distance(-inf, 1.0) = inf
  Result[2] = distance(X[0].z, Y[0].x);

  // distance(inf, NaN) = NaN
  Result[3] = distance(X[0].w, Y[0].w);

  // distance({inf, NaN, -inf, inf}, {1.0, 1.0, 1.0, NaN}) = NaN
  Result[4] = distance(X[0].xyzw, Y[0].xyzw);

  // distance({denorm}, {1.0}) = denorm
  Result[5] = distance(Y[0].z, Y[0].x);

  // distance({-denorm}, {1.0}) = denorm
  Result[6] = distance(Y[0].y, Y[0].x);
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Float32
    Stride: 16
    Data: [ inf, NaN, -inf, inf ]
  - Name: Y
    Format: Float32
    Stride: 16
    Data: [ 1.0, -0x1.e7d42cp-127, 0x1.e7d42cp-127, NaN ] 
  - Name: Result
    Format: Float32
    Stride: 4
    ZeroInitSize: 32
  - Name: ExpectedResult
    Format: Float32
    Stride: 4
    Data: [ inf, NaN, inf, NaN, NaN, 1, 1, 0x0 ]
Results:
  - Result: CheckResult
    Rule: BufferFloatULP
    ULPT: 1 
    Actual: Result
    Expected: ExpectedResult
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Result
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# UNSUPPORTED: Clang-Vulkan
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
