#--- source.hlsl

StructuredBuffer<float4> X : register(t0);
StructuredBuffer<float4> Y : register(t1);

RWStructuredBuffer<float> Result : register(u2);

[numthreads(1,1,1)]
void main() {
  // distance ({0.0}, {3.0}) = 3.0
  float R0 = distance(X[0].x, Y[0].x);
  Result[0] = R0;
  // distance({0.0, 0.0}, {3.0, 4.0}) = 5.0
  float R1 = distance(X[0].xy, Y[0].xy);
  Result[1] = R1;
  // distance({0.0, 0.0, 0.0}, {3.0, 4.0, 12.0}) = 13.0
  float R2 = distance(X[0].xyz, Y[0].xyz);
  Result[2] = R2;
  // distance({0.0, 0.0, 0.0, 0.0}, {3.0, 4.0, 12.0, 84.0}) = 85.0
  float R3 = distance(X[0].xyzw, Y[0].xyzw);
  Result[3] = R3;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Float32
    Stride: 16
    Data: [ 0.0, 0.0, 0.0, 0.0 ]
  - Name: Y
    Format: Float32
    Stride: 16
    Data: [ 3.0, 4.0, 12.0, 84.0 ]
  - Name: Result
    Format: Float32
    Stride: 4
    ZeroInitSize: 16
  - Name: ExpectedResult
    Format: Float32
    Stride: 4
    Data: [ 3.0, 5.0, 13.0, 85.0 ]
Results:
  - Result: CheckResult
    Rule: BufferExact   
    Actual: Result
    Expected: ExpectedResult
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Result
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# UNSUPPORTED: Clang-Vulkan
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
